import java.util.concurrent.locks.*;
public class queue implements PriorityQueue{
    private final int[] queue;  // массив значения
    private int size;   // количество значения в массиве
    private final ReentrantLock lock; // блокировка
    private final Condition notFull;  // условие для поток 1 и 2 - Producer
    private final Condition notEmpty;  // условие для поток 3 и 4 - Consumer
    private final Condition lessThan5; // условие для поток 3 - Consumer <= 5
    private final Condition greaterThan5; // условие для поток 4 - Consumer > 5

    public queue() {
        1) Выделение памяти под массив
        2) Инициализация переменных size = 0
        3) Инициализация Блокировки lock = new ReentrantLock()
        4) Инициализация Condition notFull = lock.newCondition()
        5) Инициализация Condition notEmpty = lock.newCondition()
        6) Инициализация Condition lessThan5 = lock.newCondition()
        7) Инициализация Condition greaterThan5 = lock.newCondition()
    }
    @Override
    public void insert(int val) {
        1) lock.lock()
        2) Try
            2.1. пока size == 10 (full()) => notFull.await()
            2.2. добавить val в конец массива - это позиция current
            2.3. пока queue[current] > queue[parent] (parent = (current - 1)/2) => мы обмениваем их местами
            2.4. выводить на экран состояние очереди
            2.5. разблокировать все потоки notEmpty, lessThan5, greaterThan5
                 notEmpty.signalAll()
                 lessThan5.signalAll()
                 greaterThan5.signalAll()
        3) Выбросить исключения
        4) lock.unlock()
    }
    @Override
    public int deleteMax(int val) { => deleteMax(1) - поток 1, deleteMax(2) - поток 2 ?
        1) lock.lock()
        2) Try
            2.1. пока size == 0 (empty()) =>  notEmpty.await()
            2.2. Инициализация res = queue[0]
            2.3. Проверка:
                2.3.1. Если поток, который работает это поток consumer 1
                       пока: массив пустой или максимальное значение > 5 => greaterThan5.await()
                2.3.2. Если поток, который работает это поток consumer 2
                       пока: массив пустой или максимальное значение <= 5 => lessThan5.await()
            2.4. удалить первый элемент (queue[0] = queue[size--])
            2.5. Пока child (parent*2 + 1) < size (начала parent = 0)
                 Если queue[child] > queue[parent] => мы обмениваем их местами
                 Наоборот break
            2.6. выводить на экран состояние очереди
            2.7. Возвращаться res
            2.8. разблокировать все потоки notEmpty.signalAll();
        3) Выбросить исключения
        4) lock.unlock()
    }
    public int getMax(){ return queue[0]; } // чтобы получить максимальное значение массива
    @Override
    public boolean full() { return size == 10; }
    @Override
    public boolean empty() { return size == 0; }
    private void print(){
        1) Отображение на экране всех элементов массива
    }

}